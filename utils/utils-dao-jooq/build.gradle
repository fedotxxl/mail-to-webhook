apply plugin: "nu.studer.jooq"

buildscript {
    repositories {
        jcenter()

        maven {
            url "https://mymavenrepo.com/repo/${myMavenRepoReadToken}/"
        }
    }

    dependencies {
        classpath "org.postgresql:postgresql:9.3-1102-jdbc41"
        classpath 'org.jooq:jooq-codegen:3.9.1'
        classpath "nu.studer:gradle-jooq-plugin:1.0.5"
    }
}

repositories {
    jcenter()
}

dependencies {
    compile cl.db.jooq
}

task postgres << {
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.9.0.xsd') {
        jdbc() {
            driver('org.postgresql.Driver')
            url('jdbc:postgresql://localhost:54392/mmr')
            user('mmr')
            password('abc')
            schema('public')
        }
        generator() {
            name("org.jooq.util.DefaultGenerator")
            database() {
                name('org.jooq.util.postgres.PostgresDatabase')
                inputSchema('public')

                forcedTypes {
                    forcedType {
                        userType('io.belov.soyuz.date.LocalDateAsInt')
                        converter('io.belov.maven.dao.jooq.LocalDateAsIntConverter')
                        expression('.*\\.repo_backup_data\\.date|.*\\.repo_backup_config\\.date')
                    }

                    forcedType {
                        userType('io.belov.maven.domain.Repo.Id')
                        converter('io.belov.maven.dao.jooq.RepoIdConverter')
                        expression('.*\\.repo\\.id|.*\\.repo_id')
                    }

                    forcedType {
                        userType('io.belov.maven.domain.User.Id')
                        converter('io.belov.maven.dao.jooq.UserIdConverter')
                        expression('.*\\.juser\\.mail|.*\\.user_id')
                    }

                    forcedType {
                        userType('io.belov.maven.domain.Repo.Token')
                        converter('io.belov.maven.dao.jooq.RepoTokenConverter')
                        expression('.*\\.token')
                    }

                    forcedType {
                        userType('io.belov.maven.domain.Money')
                        converter('io.belov.maven.dao.jooq.MoneyConverter')
                        expression('.*\\.money')
                    }

                    forcedType {
                        userType('io.belov.maven.domain.Currency')
                        converter('io.belov.maven.dao.jooq.CurrencyConverter')
                        expression('.*\\.currency')
                    }

                    forcedType {
                        userType('java.util.UUID')
                        converter('io.belov.maven.dao.jooq.UUIDConverter')
                        expression('.*\\.repo_access_log\\.id')
                    }

                    forcedType {
                        userType('io.belov.maven.domain.RepoBackupDataRestore.Status')
                        converter('io.belov.maven.dao.jooq.RepoBackupDataRestoreStatusConverter')
                        expression('.*\\.repo_backup_data_restore\\.status')
                    }
                }
            }

            target() {
                packageName('io.belov.maven.dao.jooq')
                directory('./src/main/java/')
            }

            generate([:]) {
                pojos true
                relations true
                deprecated false
                records true
                immutablePojos true
                fluentSetters true
                javaTimeTypes true
            }
        }
    }

//    logger.error(writer.toString())

//
//    Configuration configuration = new Configuration()
//            .withJdbc(
//            new Jdbc()
//                    .withDriver("org.postgresql.Driver")
//                    .withUrl("jdbc:postgresql:postgres")
//                    .withUser("postgres")
//                    .withPassword("test"))
//            .withGenerator(
//            new Generator()
//                    .withDatabase(
//                    new Database()
//                            .withName("org.jooq.util.postgres.PostgresDatabase")
//                            .withIncludes(".*")
//                            .withExcludes("")
//                            .withInputSchema("public"))
//                    .withTarget(
//                    new Target()
//                            .withPackageName("org.jooq.util.maven.example")
//                            .withDirectory("target/generated-sources/jooq")
//            ));
//
//    GenerationTool.generate(configuration);

    org.jooq.util.GenerationTool.generate(
            javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
    )
}